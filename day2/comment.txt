* function
 - 함수 는 이름만으로 호출, 파라메터의 숫자는 영향이 없음
 - 기본생성 객체: arguments
* arguments.callee
 - 자기 자신을 지칭, 자신의 이름 대신 arguments.callee 를 사용할 수 있음
 - 자기 자신을 호출하는 것은 위험: 다른 사람의 코드로 함수 이름이 바뀔 수 있음
 - 파라메터 갯수 확인: arguments.length != arguments.callee.length
* closure
 - 함수는 가상 객체(function scope)를 통해 scope를 관리한다고 이해해야 함
 - 호출이 종료된 함수의 scope는 garbage collector에 의해 삭제됨
 - 단, 해당 scope의 변수 등 source를 가리키는 reference counter가 다른 실행 객체에 존재하는 경우, gc는 이를 삭제하지 않음
 - 위 경우에 살아있는 객체를 closure라고 함, (참조하는 변수만 남아있음)
* prototype
 - prototype 이 없는 경우 생성되는 모든 객체는 동일한 method를 각각 중복되게 가지게 됨
 - 클해스함수를 위해 정의하는 것이 아니라 생성된 instance를 위해 정의
 - F.prototype = null; 은 스펙상 동작하지 않아야 함, 단 현재 동작이 다름-> 강사님 확인 예정
* apply & call
 - apply: 배열을 인자로 사용
 - call: 나열형 인자 사용
 - 코드 바깥의 함수를 사용하는 역할, 객체와 메소드의 분리, 객체에 대해 다른 메소드를 실행
* this 의 주의점
 - this의 연결은 구현하는 입장이 아니라 호출하는 쪽에서 결정
* Native Object
* ES5
 - Object.defineProperty
* ES6
 - 
